#!/usr/bin/php
<?

if ( PHP_SAPI !== 'cli' ) {
	die( "This script may only be executed from the command line.\n" );
}

$chars=array();
for ( $i = 0; $i <= 0x10ffff; $i++ ) {
	if ( $i < 0xd800 || $i > 0xdfff ) { // Skip UTF-16 surrogates
		$chars[$i] = mb_convert_encoding( pack( 'N', $i ), 'UTF-8', 'UTF-32BE' );
	}
}

### Uppercase and Lowercase mappings
echo "Creating upper and lower tables...\n";
$L = fopen( __DIR__ . '/lower.lua', 'w' );
if ( !$L ) {
	die( "Failed to open lower.lua\n" );
}
$U = fopen( __DIR__ . '/upper.lua', 'w' );
if ( !$U ) {
	die( "Failed to open upper.lua\n" );
}
fprintf( $L, "-- This file is automatically generated by make-tables.php\n" );
fprintf( $L, "return {\n" );
fprintf( $U, "-- This file is automatically generated by make-tables.php\n" );
fprintf( $U, "return {\n" );
foreach ( $chars as $i => $c ) {
	$l = mb_strtolower( $c, 'UTF-8' );
	$u = mb_strtoupper( $c, 'UTF-8' );
	if ( $c !== $l ) {
		fprintf( $L, "\t[\"%s\"] = \"%s\",\n", $c, $l );
	}
	if ( $c !== $u ) {
		fprintf( $U, "\t[\"%s\"] = \"%s\",\n", $c, $u );
	}
}
fprintf( $L, "}\n" );
fprintf( $U, "}\n" );
fclose( $L );
fclose( $U );

### Pattern code mappings
echo "Creating charsets table...\n";
$X = fopen( __DIR__ . '/charsets.lua', 'w' );
if ( !$X ) {
	die( "Failed to open charsets.lua\n" );
}
$pats = array(
	'a' => array( '\p{L}', 'lu' ),
	'c' => array( '\p{Cc}', null ),
	'd' => array( '\p{Nd}', null ),
	'l' => array( '\p{Ll}', null ),
	'p' => array( '\p{P}', null ),
	's' => array( '\p{Xps}', null ),
	'u' => array( '\p{Lu}', null ),
	'w' => array( null, 'da' ), # '[\p{L}\p{Nd}]' exactly matches 'a' + 'd'
	'x' => array( '[0-9A-Fa-f０-９Ａ-Ｆａ-ｆ]', null ),
	'z' => array( '\0', null ),
);
fprintf( $X, "-- This file is automatically generated by make-tables.php\n" );
fprintf( $X, "local pats = {\n" );
foreach ( $pats as $k => $pp ) {
	$re=$pp[0];
	if ( !$re ) {
		fprintf( $X, "\t[0x%02x] = {}, -- %s\n", ord( $k ), $k );
		continue;
	}

	$re2='fail';
	if ( $pp[1] ) {
		$re2 = array();
		foreach ( str_split( $pp[1] ) as $p ) {
			$re2[] = $pats[$p][0];
		}
		$re2=join( '|', $re2 );
	}

	fprintf( $X, "\t[0x%02x] = { -- %s\n", ord( $k ), $k );
	$arr = true;
	foreach ( $chars as $i => $c ) {
		if ( preg_match( "/^$re$/u", $c ) && !preg_match( "/^$re2$/u", $c ) ) {
			if ( preg_match( '/^\p{Cc}$/u', $c ) ) {
				$c = sprintf( 'U+%04x', $i );
			}
			if ( $arr ) {
				fprintf( $X, "\t\t1, -- 0x%06x: %s\n", $i, $c );
			} else {
				fprintf( $X, "\t\t[0x%06x] = 1, -- %s\n", $i, $c );
			}
		} else {
			$arr = false;
		}
	}
	fprintf( $X, "\t},\n" );
}
foreach ( $pats as $k => $pp ) {
	$kk = strtoupper( $k );
	fprintf( $X, "\t[0x%02x] = {}, -- %s\n", ord( $kk ), $kk );
}
fprintf( $X, "}\n" );
foreach ( $pats as $k => $pp ) {
	if ( $pp[1] ) {
		$check = array();
		foreach ( str_split( $pp[1] ) as $p ) {
			$check[] = sprintf( "pats[0x%02x][k]", ord( $p ) );
		}
		fprintf( $X, "setmetatable( pats[0x%02x], { __index = function ( t, k ) return %s end } )\n",
			ord( $k ), join( ' or ', $check ) );
	}
}
foreach ( $pats as $k => $pp ) {
	fprintf( $X, "setmetatable( pats[0x%02x], { __index = function ( t, k ) return k and not pats[0x%02x][k] end } )\n",
		ord( strtoupper( $k ) ), ord( $k ) );
}
fprintf( $X, "return pats\n" );
fclose( $X );
